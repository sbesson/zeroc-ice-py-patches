diff -ur zeroc-ice-3.6.5.orig/src/Types.cpp zeroc-ice-3.6.5/src/Types.cpp
--- zeroc-ice-3.6.5.orig/src/Types.cpp	2024-10-25 09:41:18
+++ zeroc-ice-3.6.5/src/Types.cpp	2024-10-25 09:55:19
@@ -338,14 +338,7 @@
         assert(_sliceInfoType);
     }
 
-    IcePy::PyObjectHandle args = PyTuple_New(0);
-    if(!args.get())
-    {
-        assert(PyErr_Occurred());
-        throw AbortMarshaling();
-    }
-
-    PyObjectHandle sd = PyEval_CallObject(_slicedDataType, args.get());
+    PyObjectHandle slice{PyObject_CallObject(_slicedDataType, nullptr)};
     if(!sd.get())
     {
         assert(PyErr_Occurred());
@@ -371,7 +364,7 @@
     int i = 0;
     for(vector<Ice::SliceInfoPtr>::const_iterator p = slicedData->slices.begin(); p != slicedData->slices.end(); ++p)
     {
-        PyObjectHandle slice = PyEval_CallObject(_sliceInfoType, args.get());
+        PyObjectHandle slice{PyObject_CallObject(_sliceInfoType, nullptr)};
         if(!slice.get())
         {
             assert(PyErr_Occurred());
@@ -1546,18 +1539,17 @@
             Py_ssize_t sz = 0;
             if(p != Py_None)
             {
-                const void* buf = 0;
-                if(PyObject_AsReadBuffer(p, &buf, &sz) == 0)
+                Py_buffer pybuf;
+                if (pi && PyObject_GetBuffer(p, &pybuf, PyBUF_SIMPLE | PyBUF_FORMAT) == 0)
                 {
-                    if(pi->kind == PrimitiveInfo::KindString)
-                    {
-                        PyErr_Format(PyExc_ValueError, STRCAST("expected sequence value"));
-                        throw AbortMarshaling();
-                    }
+                    // Strings are handled as variable length types above.
+                    assert(pi->kind != PrimitiveInfo::KindString);
+                    sz = pybuf.len;
+                    PyBuffer_Release(&pybuf);
                 }
                 else
                 {
-                    PyErr_Clear(); // PyObject_AsReadBuffer sets an exception on failure.
+                    PyErr_Clear(); // PyObject_GetBuffer sets an exception on failure.
 
                     PyObjectHandle fs;
                     if(pi)
@@ -1824,7 +1816,7 @@
     }
     else
     {
-        PyErr_Clear(); // PyObject_AsReadBuffer sets an exception on failure.
+        PyErr_Clear(); // PyObject_GetBuffer sets an exception on failure.
     }
 
     PyObjectHandle fs = getSequence(pi, p);
diff -ur zeroc-ice-3.6.5.orig/src/Util.cpp zeroc-ice-3.6.5/src/Util.cpp
--- zeroc-ice-3.6.5.orig/src/Util.cpp	2024-10-25 09:41:18
+++ zeroc-ice-3.6.5/src/Util.cpp	2024-10-25 09:42:54
@@ -683,12 +683,7 @@
 IcePy::createExceptionInstance(PyObject* type)
 {
     assert(PyExceptionClass_Check(type));
-    IcePy::PyObjectHandle args = PyTuple_New(0);
-    if(!args.get())
-    {
-        return 0;
-    }
-    return PyEval_CallObject(type, args.get());
+    return PyObject_CallObject(type, nullptr);
 }
 
 static void
